// <auto-generated />
using System;
using HotelSample.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HotelSample.Migrations
{
    [DbContext(typeof(HotelDBContext))]
    partial class HotelDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HotelSample.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Hotel");
                });

            modelBuilder.Entity("HotelSample.Models.HotelAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressText")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("CityId");

                    b.Property<int?>("HotelId");

                    b.Property<string>("LocationLatitude")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("LocationLongtitude")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelAddress");
                });

            modelBuilder.Entity("HotelSample.Models.HotelComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int?>("HotelId");

                    b.Property<int?>("Score");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("HotelComment");
                });

            modelBuilder.Entity("HotelSample.Models.HotelContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactValue")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("HotelContactTypeId");

                    b.Property<int>("HotelId");

                    b.HasKey("Id");

                    b.HasIndex("HotelContactTypeId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelContact");
                });

            modelBuilder.Entity("HotelSample.Models.HotelContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HotelContactType");
                });

            modelBuilder.Entity("HotelSample.Models.HotelImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("HotelId");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelImage");
                });

            modelBuilder.Entity("HotelSample.Models.HotelRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HotelId");

                    b.Property<string>("RoomDetail")
                        .IsUnicode(false);

                    b.Property<string>("RoomSummary")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("RoomTypeId");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("HotelRoom");
                });

            modelBuilder.Entity("HotelSample.Models.HotelRoomPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("HotelRoomId");

                    b.Property<bool?>("IsAvailable");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("HotelRoomId");

                    b.ToTable("HotelRoomPrice");
                });

            modelBuilder.Entity("HotelSample.Models.HotelScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HotelId");

                    b.Property<int?>("HotelScoreTypeId");

                    b.Property<int?>("ScoreValue");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelScore");
                });

            modelBuilder.Entity("HotelSample.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("RoomType");
                });

            modelBuilder.Entity("HotelSample.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HotelSample.Models.HotelAddress", b =>
                {
                    b.HasOne("HotelSample.Models.Hotel", "Hotel")
                        .WithMany("HotelAddress")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("FK_HotelAddress_Hotel");
                });

            modelBuilder.Entity("HotelSample.Models.HotelComment", b =>
                {
                    b.HasOne("HotelSample.Models.Hotel", "Hotel")
                        .WithMany("HotelComment")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("FK_HotelComment_Hotel");

                    b.HasOne("HotelSample.Models.User", "User")
                        .WithMany("HotelComment")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_HotelComment_User");
                });

            modelBuilder.Entity("HotelSample.Models.HotelContact", b =>
                {
                    b.HasOne("HotelSample.Models.HotelContactType", "HotelContactType")
                        .WithMany("HotelContact")
                        .HasForeignKey("HotelContactTypeId")
                        .HasConstraintName("FK_HotelContact_HotelContactType");

                    b.HasOne("HotelSample.Models.Hotel", "Hotel")
                        .WithMany("HotelContact")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("FK_HotelContact_Hotel");
                });

            modelBuilder.Entity("HotelSample.Models.HotelImage", b =>
                {
                    b.HasOne("HotelSample.Models.Hotel", "Hotel")
                        .WithMany("HotelImage")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("FK_HotelImage_Hotel");
                });

            modelBuilder.Entity("HotelSample.Models.HotelRoom", b =>
                {
                    b.HasOne("HotelSample.Models.Hotel", "Hotel")
                        .WithMany("HotelRoom")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("FK_HotelRoom_Hotel");

                    b.HasOne("HotelSample.Models.RoomType", "RoomType")
                        .WithMany("HotelRoom")
                        .HasForeignKey("RoomTypeId")
                        .HasConstraintName("FK_HotelRoom_RoomType");
                });

            modelBuilder.Entity("HotelSample.Models.HotelRoomPrice", b =>
                {
                    b.HasOne("HotelSample.Models.HotelRoom", "HotelRoom")
                        .WithMany("HotelRoomPrice")
                        .HasForeignKey("HotelRoomId")
                        .HasConstraintName("FK_HotelRoomPrice_HotelRoom");
                });

            modelBuilder.Entity("HotelSample.Models.HotelScore", b =>
                {
                    b.HasOne("HotelSample.Models.Hotel", "Hotel")
                        .WithMany("HotelScore")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("FK_HotelScore_Hotel");
                });
#pragma warning restore 612, 618
        }
    }
}
